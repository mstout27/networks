Script started on Sun 02 Dec 2018 11:18:41 AM EST
mstout@cisc450:~/networks$ make clean
rm tcpclient tcpserver udpclient udpserver
mstout@cisc450:~/networks$ ls -l
total 54
-rw-rw-r-- 1 mstout mstout   342 Nov 30 16:55 Makefile
-rw-rw-r-- 1 mstout mstout  3434 Dec  2 11:18 output.txt
-rw-rw-r-- 1 mstout mstout     0 Dec  2 11:18 receiver.txt
-rw-rw-r-- 1 mstout mstout 47019 Dec  2 11:17 sender.txt
-rw-rw-r-- 1 mstout mstout  5501 Nov 30 16:55 tcpclient.c
-rw-rw-r-- 1 mstout mstout  7943 Nov 30 16:55 tcpserver.c
-rw-rw-r-- 1 mstout mstout  1777 Nov 30 18:13 test1.txt
-rw-rw-r-- 1 mstout mstout  3434 Nov 30 16:55 test2.txt
-rw-rw-r-- 1 mstout mstout  7562 Dec  2 11:17 udpclient.c
-rw-rw-r-- 1 mstout mstout  6405 Dec  2 11:17 udpserver.c
mstout@cisc450:~/networks$ make
/usr/bin/gcc tcpclient.c -o tcpclient
/usr/bin/gcc tcpserver.c -o tcpserver
/usr/bin/gcc udpclient.c -o udpclient
/usr/bin/gcc udpserver.c -o udpserver
mstout@cisc450:~/networks$ ls -l4[K
total 50
-rw-rw-r-- 1 mstout mstout   342 Nov 30 16:55 Makefile
-rw-rw-r-- 1 mstout mstout  3434 Dec  2 11:18 output.txt
-rw-rw-r-- 1 mstout mstout     0 Dec  2 11:18 receiver.txt
-rw-rw-r-- 1 mstout mstout 47019 Dec  2 11:17 sender.txt
-rwxrwxr-x 1 mstout mstout 13452 Dec  2 11:18 tcpclient
-rw-rw-r-- 1 mstout mstout  5501 Nov 30 16:55 tcpclient.c
-rwxrwxr-x 1 mstout mstout 13326 Dec  2 11:18 tcpserver
-rw-rw-r-- 1 mstout mstout  7943 Nov 30 16:55 tcpserver.c
-rw-rw-r-- 1 mstout mstout  1777 Nov 30 18:13 test1.txt
-rw-rw-r-- 1 mstout mstout  3434 Nov 30 16:55 test2.txt
-rwxrwxr-x 1 mstout mstout 13614 Dec  2 11:18 udpclient
-rw-rw-r-- 1 mstout mstout  7562 Dec  2 11:17 udpclient.c
-rwxrwxr-x 1 mstout mstout 13678 Dec  2 11:18 udpserver
-rw-rw-r-- 1 mstout mstout  6405 Dec  2 11:17 udpserver.c
mstout@cisc450:~/networks$ ./udpserver 
Waiting for incoming messages on port 65115

Enter value for Packet Loss Rate (between 0 and 1): 0
Enter value for ACK Loss Rate (between 0 and 1): 0
Packet 0 received with 19 data bytes
ACK 0 transmitted
Packet 1 received with 35 data bytes
ACK 1 transmitted
Packet 0 received with 17 data bytes
ACK 0 transmitted
Packet 1 received with 5 data bytes
ACK 1 transmitted
Packet 0 received with 20 data bytes
ACK 0 transmitted
Packet 1 received with 14 data bytes
ACK 1 transmitted
Packet 0 received with 5 data bytes
ACK 0 transmitted
Packet 1 received with 71 data bytes
ACK 1 transmitted
Packet 0 received with 46 data bytes
ACK 0 transmitted
Packet 1 received with 69 data bytes
ACK 1 transmitted
Packet 0 received with 48 data bytes
ACK 0 transmitted
Packet 1 received with 78 data bytes
ACK 1 transmitted
Packet 0 received with 37 data bytes
ACK 0 transmitted
Packet 1 received with 60 data bytes
ACK 1 transmitted
Packet 0 received with 49 data bytes
ACK 0 transmitted
Packet 1 received with 36 data bytes
ACK 1 transmitted
Packet 0 received with 5 data bytes
ACK 0 transmitted
Packet 1 received with 5 data bytes
ACK 1 transmitted
Packet 0 received with 60 data bytes
ACK 0 transmitted
Packet 1 received with 58 data bytes
ACK 1 transmitted
Packet 0 received with 65 data bytes
ACK 0 transmitted
Packet 1 received with 61 data bytes
ACK 1 transmitted
Packet 0 received with 61 data bytes
ACK 0 transmitted
Packet 1 received with 45 data bytes
ACK 1 transmitted
Packet 0 received with 58 data bytes
ACK 0 transmitted
Packet 1 received with 53 data bytes
ACK 1 transmitted
Packet 0 received with 53 data bytes
ACK 0 transmitted
Packet 1 received with 62 data bytes
ACK 1 transmitted
Packet 0 received with 20 data bytes
ACK 0 transmitted
Packet 1 received with 5 data bytes
ACK 1 transmitted
Packet 0 received with 21 data bytes
ACK 0 transmitted
Packet 1 received with 65 data bytes
ACK 1 transmitted
Packet 0 received with 65 data bytes
ACK 0 transmitted
Packet 1 received with 65 data bytes
ACK 1 transmitted
Packet 0 received with 65 data bytes
ACK 0 transmitted
Packet 1 received with 65 data bytes
ACK 1 transmitted
Packet 0 received with 65 data bytes
ACK 0 transmitted
Packet 1 received with 65 data bytes
ACK 1 transmitted
Packet 0 received with 19 data bytes
ACK 0 transmitted
Packet 1 received with 5 data bytes
ACK 1 transmitted
Packet 0 received with 49 data bytes
ACK 0 transmitted
Packet 1 received with 33 data bytes
ACK 1 transmitted
Packet 0 received with 49 data bytes
ACK 0 transmitted
Packet 1 received with 55 data bytes
ACK 1 transmitted
Packet 0 received with 51 data bytes
ACK 0 transmitted
Packet 1 received with 5 data bytes
ACK 1 transmitted
Packet 0 received with 5 data bytes
ACK 0 transmitted
Packet 1 received with 27 data bytes
ACK 1 transmitted
Packet 0 received with 5 data bytes
ACK 0 transmitted
Packet 1 received with 82 data bytes
ACK 1 transmitted
Packet 0 received with 27 data bytes
ACK 0 transmitted
Packet 1 received with 88 data bytes
ACK 1 transmitted
Packet 0 received with 88 data bytes
ACK 0 transmitted
Packet 1 received with 24 data bytes
ACK 1 transmitted
Packet 0 received with 21 data bytes
ACK 0 transmitted
Packet 1 received with 50 data bytes
ACK 1 transmitted
Packet 0 received with 61 data bytes
ACK 0 transmitted
Packet 1 received with 43 data bytes
ACK 1 transmitted
Packet 0 received with 66 data bytes
ACK 0 transmitted
Packet 1 received with 45 data bytes
ACK 1 transmitted
Packet 0 received with 28 data bytes
ACK 0 transmitted
Packet 1 received with 42 data bytes
ACK 1 transmitted
Packet 0 received with 43 data bytes
ACK 0 transmitted
Packet 1 received with 19 data bytes
ACK 1 transmitted
Packet 0 received with 55 data bytes
ACK 0 transmitted
Packet 1 received with 84 data bytes
ACK 1 transmitted
Packet 0 received with 5 data bytes
ACK 0 transmitted
Packet 1 received with 19 data bytes
ACK 1 transmitted
Packet 0 received with 18 data bytes
ACK 0 transmitted
Packet 1 received with 17 data bytes
ACK 1 transmitted
Packet 0 received with 5 data bytes
ACK 0 transmitted
Packet 1 received with 67 data bytes
ACK 1 transmitted
Packet 0 received with 65 data bytes
ACK 0 transmitted
Packet 1 received with 36 data bytes
ACK 1 transmitted
Packet 0 received with 42 data bytes
ACK 0 transmitted
Packet 1 received with 68 data bytes
ACK 1 transmitted
Packet 0 received with 68 data bytes
ACK 0 transmitted
Packet 1 received with 75 data bytes
ACK 1 transmitted
Packet 0 received with 5 data bytes
ACK 0 transmitted
Packet 1 received with 69 data bytes
ACK 1 transmitted
Packet 0 received with 50 data bytes
ACK 0 transmitted
Packet 1 received with 5 data bytes
ACK 1 transmitted
Packet 0 received with 20 data bytes
ACK 0 transmitted
Packet 1 received with 63 data bytes
ACK 1 transmitted
Packet 0 received with 63 data bytes
ACK 0 transmitted
Packet 1 received with 13 data bytes
ACK 1 transmitted
Packet 0 received with 63 data bytes
ACK 0 transmitted
Packet 1 received with 13 data bytes
ACK 1 transmitted
Packet 0 received with 62 data bytes
ACK 0 transmitted
Packet 1 received with 18 data bytes
ACK 1 transmitted

End of Transmission Packet with sequence number 0 received with 0 data bytes

Number of data packets received successfully: 90 
Total number of data bytes received which are delivered to user: 3434 
Total number of duplicate data packets received: 0 
Number of data packets received but dropped due to loss: 0 
Total number of data packets received: 90 
Number of ACKs transmitted without loss: 90 
Number of ACKs generated but dropped due to loss: 0 
Total number of ACKs generated: 90 
mstout@cisc450:~/networks$ cat output.txt 
\begin{center}
{\bf PROGRAMMING PROJECT 2\\ }
\end{center}

%\vspace{0.3in}
\noindent

In this project, you will implement the Stop-and-Wait protocol to 
transmit data from a Sender to a Receiver
in the presence of errors and packet loss. The protocol will be 
unidirectional in which data is sent in one
direction only with acknowledgments being sent in the reverse direction. 
Only positive ACKs are used. The
transmission of packets and ACKs will be done over UDP 
(that represents an unreliable network layer
channel) using fixed UDP ports.


To implement this protocol, you will write two separate
programs called {\em Sender} and {\em Receiver} which
represent the actions to be executed by the sending node and
the receiving node respectively. Both the Sender and the
Receiver must run on the host {\em cis450.cis.udel.edu},
as you will have to come in to my office
to give me a demo of your programs. For convenience, 
both the hostname and the server port number may
be hardcoded into both the Sender and Receiver, 
but this should be done in such a way that they should be
easy to change.

\begin{verbatim}
    --------------------------------------------------------
    |                   Count (2 bytes)                    |
    --------------------------------------------------------
    |           Packet Sequence Number (2 bytes)           |
    --------------------------------------------------------
    |                 Data (0 - 80 bytes)                  |
    --------------------------------------------------------
\end{verbatim}

The second field of the header is called the
packet sequence number. Each
packet transmitted by the Sender is assigned
a sequence number that alternates between 0 and 1,
in accordance with the Stop-and-Wait protocol.


Output of your program

At specific places in both your Sender and Receiver programs, you must print 
out specific messages.
The symbol ‚Äún‚Äù below refers to the sequence number of the transmitted or receiv
0 or 1), and the symbol ‚Äúc‚Äù below refers to the count (number of data bytes) in
 the transmitted or
received packet.
The messages to be printed by the Sender are:
When a new data packet numbered n is sent by the Sender:
Packet n transmitted with c data bytes
When a data packet numbered n is retransmitted by the Sender:
Packet n retransmitted with c data bytes
When a timeout expires:
Timeout expired for packet numbered n
When an ACK is received with number n:
ACK n received
When the ‚ÄúEnd of Transmission‚Äù packet is sent:
End of Transmission Packet with sequence number n transmitted with c data bytes

\begin{center}
{\bf Testing}
\end{center}

The files {\em test1.txt} and {\em test2.txt} in the directory
{\em /usa/sethi/networks/proj2} on {\em cis450.cis.udel.edu}
are sample input files that may
be used by you to test your programs.
It is strongly suggested that you first use {\em test1.txt} for
all your testing, and only if you have thoroughly debugged your
programs, then proceed with using {\em test2.txt} for further testing.

It is also suggested that you test your programs in phases using
the following configuration parameter values:

\begin{itemize}
\item Packet and ACK loss rates 0, Timeout value $n$  = 5.
\item Packet loss rate 0.2, ACK loss rate 0, Timeout value
$n$ = 5.
\item Packet loss rate 0, ACK loss rate 0.2, Timeout value
$n$ = 5.
\item Packet and ACK loss rates 0, Timeout value $n$ = 3.
\end{itemize}
mstout@cisc450:~/networks$ diff output.txt test2.txt 
mstout@cisc450:~/networks$ exit
exit

Script done on Sun 02 Dec 2018 11:21:20 AM EST
